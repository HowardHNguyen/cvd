# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ebdsi6xiiE4m8jY6FYiCgywDKogpdryi
"""

import streamlit as st
import joblib
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

# Title and instructions
st.title("Cardiovascular Disease Prediction by Howard Nguyen")
st.markdown("Select normal values for â˜… marked fields if you don't know the exact values")

# Sidebar for input features
st.sidebar.header("Input Features")
age = st.sidebar.number_input("Enter your age:", min_value=0, max_value=120, value=25)
tot_chol = st.sidebar.number_input("Total Cholesterol:", min_value=0, max_value=500, value=200)
sysbp = st.sidebar.number_input("Systolic Blood Pressure:", min_value=0, max_value=300, value=120)
diabp = st.sidebar.number_input("Diastolic Blood Pressure:", min_value=0, max_value=200, value=80)
bmi = st.sidebar.number_input("BMI:", min_value=0.0, max_value=100.0, value=25.0)
cursmoke = st.sidebar.selectbox("Current Smoker:", options=[0, 1])
glucose = st.sidebar.number_input("Glucose:", min_value=0, max_value=500, value=100)
diabetes = st.sidebar.selectbox("Diabetes:", options=[0, 1])
heartrate = st.sidebar.number_input("Heart Rate:", min_value=0, max_value=200, value=70)
cigpday = st.sidebar.number_input("Cigarettes Per Day:", min_value=0, max_value=100, value=0)
bpmeds = st.sidebar.selectbox("On BP Meds:", options=[0, 1])
stroke = st.sidebar.selectbox("Stroke:", options=[0, 1])
hyperten = st.sidebar.selectbox("Hypertension:", options=[0, 1])

# Load models
rf_model = joblib.load('rf_model.pkl')
gbm_model = joblib.load('gbm_model.pkl')

# Predict button
if st.sidebar.button('Predict'):
    input_data = np.array([[age, tot_chol, sysbp, diabp, bmi, cursmoke, glucose, diabetes, heartrate, cigpday, bpmeds, stroke, hyperten]])
    
    rf_pred = rf_model.predict(input_data)[0]
    rf_prob = rf_model.predict_proba(input_data)[0][1]
    
    gbm_pred = gbm_model.predict(input_data)[0]
    gbm_prob = gbm_model.predict_proba(input_data)[0][1]
    
    st.subheader("Predictions")
    st.write(f"Random Forest Prediction: {'CVD' if rf_pred else 'No CVD'} with probability {rf_prob:.2f}")
    st.write(f"Gradient Boosting Machine Prediction: {'CVD' if gbm_pred else 'No CVD'} with probability {gbm_prob:.2f}")

# Model performance section
st.subheader("Model Performance")

# Sample ROC Curve plot
def plot_roc_curve(model, X, y, label):
    y_pred_proba = model.predict_proba(X)[::,1]
    fpr, tpr, _ = roc_curve(y, y_pred_proba)
    auc_score = auc(fpr, tpr)
    plt.plot(fpr, tpr, label=f"{label} (AUC = {auc_score:.2f})")

# Assuming you have X_test and y_test
# plot_roc_curve(rf_model, X_test, y_test, 'Random Forest')
# plot_roc_curve(gbm_model, X_test, y_test, 'Gradient Boosting Machine')

plt.plot([0, 1], [0, 1], linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='best')
st.pyplot(plt)
