# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/155JXfWXUx6PqmDZbJZQh9Z2yp-JKzgqc
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load the models
rf_model = joblib.load('rf_model.pkl')
gbm_model = joblib.load('gbm_model.pkl')

# Define a function to make predictions
def make_predictions(model, input_data):
    prediction = model.predict(input_data)
    probability = model.predict_proba(input_data)
    return prediction, probability

# Define the Streamlit app
def main():
    st.title("Cardiovascular Disease Prediction")

    st.write("""
    ## Predicting the likelihood of cardiovascular disease
    Please provide the following information:
    """)

    # Collect user input
    age = st.number_input('Age', min_value=0, max_value=120, value=50)
    totchol = st.number_input('Total Cholesterol', min_value=0, max_value=1000, value=200)
    sysbp = st.number_input('Systolic Blood Pressure', min_value=0, max_value=300, value=120)
    diabp = st.number_input('Diastolic Blood Pressure', min_value=0, max_value=200, value=80)
    bmi = st.number_input('Body Mass Index', min_value=0.0, max_value=100.0, value=25.0)
    cursmoke = st.selectbox('Current Smoker', [0, 1])
    glucose = st.number_input('Glucose Level', min_value=0, max_value=300, value=100)
    diabetes = st.selectbox('Diabetes', [0, 1])
    heartrate = st.number_input('Heart Rate', min_value=0, max_value=200, value=70)
    cigpday = st.number_input('Cigarettes per Day', min_value=0, max_value=100, value=0)
    bpmeds = st.selectbox('On Blood Pressure Medication', [0, 1])
    stroke = st.selectbox('Previous Stroke', [0, 1])
    hyperten = st.selectbox('Hypertension', [0, 1])

    # Prepare input data for prediction
    input_data = np.array([[age, totchol, sysbp, diabp, bmi, cursmoke, glucose, diabetes, heartrate, cigpday, bpmeds, stroke, hyperten]])

    st.write("""
    ## Model Selection
    Select a model to make the prediction:
    """)

    model_choice = st.selectbox('Model', ['Random Forest', 'Gradient Boosting Machine'])

    if st.button('Predict'):
        if model_choice == 'Random Forest':
            prediction, probability = make_predictions(rf_model, input_data)
        else:
            prediction, probability = make_predictions(gbm_model, input_data)

        st.write(f"### Prediction: {'Cardiovascular Disease' if prediction[0] == 1 else 'No Cardiovascular Disease'}")
        st.write(f"### Probability: {probability[0][1]:.2f}")

if __name__ == '__main__':
    main()